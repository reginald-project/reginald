name: CI

on:
  push:
  pull_request:

permissions:
  contents: read

jobs:
  license-check:
    name: Check dependenciesâ€™ licenses
    runs-on: ubuntu-latest

    steps:
      - name: Clone the source code
        uses: actions/checkout@v4.2.2

      - name: Set up the Go toolchain
        uses: actions/setup-go@v5.5.0
        with:
          go-version-file: go.mod

      - name: Check licenses
        run: make license-check

  build:
    name: Build on ${{ matrix.goos }}/${{ matrix.goarch }}
    if:
      "!contains(github.event.head_commit.message, '[ci skip]') &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !startsWith(github.event.head_commit.message, 'docs')"
    runs-on: ${{ matrix.os }}
    needs: [license-check]
    strategy:
      matrix:
        include:
          - { goos: "linux", goarch: "amd64", os: "ubuntu-latest" }
          - { goos: "linux", goarch: "arm64", os: "ubuntu-24.04-arm" }
          - { goos: "windows", goarch: "amd64", os: "windows-latest" }
          - { goos: "windows", goarch: "arm64", os: "windows-11-arm" }
          - { goos: "darwin", goarch: "amd64", os: "macos-13" }
          - { goos: "darwin", goarch: "arm64", os: "macos-latest" }
      fail-fast: false

    steps:
      - name: Clone the source code
        uses: actions/checkout@v4.2.2

      - name: Install the Go toolchain
        uses: actions/setup-go@v5.5.0
        with:
          go-version-file: go.mod

      - name: Display the platform information for Go
        run: |
          go env GOOS
          go env GOARCH
          go version

      - name: Resolve the version number
        shell: bash
        run: |
          ARTIFACT_VERSION="$(cat VERSION)-0.canary.${{ github.run_number }}"
          VERSION="${ARTIFACT_VERSION}+${{ github.sha }}.$(date -u +"%Y%m%d%H%M%S")"
          echo "ARTIFACT_VERSION=${ARTIFACT_VERSION}" >> "${GITHUB_ENV}"
          echo "VERSION=${VERSION}" >> "${GITHUB_ENV}"

      - name: Resolve the build output
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "BUILD_OUTPUT=reginald.exe" >> "${GITHUB_ENV}"
          else
            echo "BUILD_OUTPUT=reginald" >> "${GITHUB_ENV}"
          fi

      - name: Verify and download dependencies
        run: |
          go mod verify
          go mod download

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run:
          make build GOFLAGS="-v" OUTPUT="${{ env.BUILD_OUTPUT }}" VERSION="${{
          env.VERSION }}"

      - name: Run the version command
        if: ${{ runner.os != 'Windows' }}
        run: ./reginald --version
        env:
          REGINALD_DEBUG: true

      - name: Run the version command on Windows
        if: ${{ runner.os == 'Windows' }}
        run: .\reginald.exe --version

      - name: Determine the artifact name
        shell: bash
        run:
          echo "ARTIFACT_NAME=reginald-${{ env.ARTIFACT_VERSION }}-${{
          matrix.goos }}-${{ matrix.goarch }}" >> "${GITHUB_ENV}"

      - name: Show files on Windows
        if: ${{ runner.os == 'Windows' }}
        run: dir

      - name: Upload the build artifact
        uses: actions/upload-artifact@v4.6.2
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./${{ env.BUILD_OUTPUT }}
          if-no-files-found: error

  lint:
    name: Lint
    if:
      "!contains(github.event.head_commit.message, '[ci skip]') &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !startsWith(github.event.head_commit.message, 'docs')"
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Clone the source code
        uses: actions/checkout@v4.2.2

      - name: Set up the Go toolchain
        uses: actions/setup-go@v5.5.0
        with:
          go-version-file: go.mod

      - name: Verify and download dependencies
        run: |
          go mod verify
          go mod download

      - name: Extract the golangci-lint version
        run: |
          GOLANGCI_LINT_VERSION="$(grep '^GOLANGCI_LINT_VERSION' Makefile | cut -d '=' -f2 | xargs)"
          echo "GOLANGCI_LINT_VERSION=${GOLANGCI_LINT_VERSION}" >> "${GITHUB_ENV}"

      - name: Run the linter
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          version: v${{ env.GOLANGCI_LINT_VERSION }}

  unit-tests:
    name: Unit tests
    if:
      "!contains(github.event.head_commit.message, '[ci skip]') &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !startsWith(github.event.head_commit.message, 'docs')"
    runs-on: ${{ matrix.os }}
    needs: [build]

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-24.04
          - ubuntu-22.04
          - ubuntu-24.04-arm
          - ubuntu-22.04-arm
          - windows-2025
          - windows-2022
          - windows-11-arm
          - macos-15
          - macos-14
          - macos-13

    steps:
      - name: Clone the source code
        uses: actions/checkout@v4.2.2

      - name: Install the Go toolchain
        uses: actions/setup-go@v5.5.0
        with:
          go-version-file: go.mod

      - name: Display the platform information for Go
        run: |
          go env GOOS
          go env GOARCH
          go version

      - name: Verify and download dependencies
        run: |
          go mod verify
          go mod download

      - name: Run the unit tests
        run: make test GOFLAGS="-v"

  race-tests:
    name: Race tests
    if:
      "!contains(github.event.head_commit.message, '[ci skip]') &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !startsWith(github.event.head_commit.message, 'docs')"
    runs-on: ${{ matrix.os }}
    needs: [build]

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest

    steps:
      - name: Clone the source code
        uses: actions/checkout@v4.2.2

      - name: Install the Go toolchain
        uses: actions/setup-go@v5.5.0
        with:
          go-version-file: go.mod

      - name: Display the platform information for Go
        run: |
          go env GOOS
          go env GOARCH
          go version

      - name: Verify and download dependencies
        run: |
          go mod verify
          go mod download

      - name: Run the tests
        run: make test GOFLAGS="-race -v"

  # TODO: Create the integration tests.
